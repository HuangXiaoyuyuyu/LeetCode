package LeetCode_0832_翻转图像;

/**
 * @Author OliverYu
 * @Date 2019/8/13 22:26
 * @Email 253757635@qq.com
 * @Description TODO
 *
 * 给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。
 * 水平翻转图片就是将图片的每一行都进行翻转，即逆序。
 *  例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。
 * 反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。
 *  例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。
 *
 * 示例 1:
 * 输入: [
 *        [1,1,0],
 *        [1,0,1],
 *        [0,0,0]
 *      ]
 * 输出: [
 *        [1,0,0],
 *        [0,1,0],
 *        [1,1,1]
 *       ]
 *  解释: 首先翻转每一行: [
 *                        [0,1,1],
 *                        [1,0,1],
 *                        [0,0,0]
 *                      ]；
 *  然后反转图片: [
 *                 [1,0,0],
 *                 [0,1,0],
 *                 [1,1,1]
 *               ]
 *
 * 示例 2:
 * 输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
 * 输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
 * 解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；
 * 然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
 *
 * 说明:1 <= A.length = A[0].length <= 20
 *      0 <= A[i][j] <= 1
 */
public class Solution {
    public int[][] flipAndInvertImage(int[][] A) {
        for (int i=0; i<A.length; i++) {
            A[i] = reverseInt(A[i]);
        }
        return A;
    }

    private int[] reverseInt(int[] a) {
        int i=0;
        int j = a.length - 1;
        int temp = 0;
        while (i <= j) {
            temp = a[i] == 1 ? 0 : 1;
            a[i] = a[j] == 1 ? 0 : 1;
            a[j] = temp;
            i++;
            j--;
        }
        return a;
    }
}
